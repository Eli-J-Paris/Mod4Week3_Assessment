// <auto-generated />
using System;
using CommerceMvc.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CommerceMvc.Migrations
{
    [DbContext(typeof(CommerceMvcContext))]
    [Migration("20230824201350_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommerceMvc.Models.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_merchants");

                    b.ToTable("merchants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Restaurant",
                            Name = "Biker Jim's"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Outdoor",
                            Name = "REI"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Restaurant",
                            Name = "Walter's 303"
                        });
                });

            modelBuilder.Entity("CommerceMvc.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_products_merchant_id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Food",
                            Description = "A yummy hotdog",
                            MerchantId = 1,
                            Name = "Elk Jalapeno Cheddar",
                            ReleaseDate = new DateTimeOffset(new DateTime(2023, 1, 25, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2140), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 52
                        },
                        new
                        {
                            Id = 2,
                            Category = "Food",
                            Description = "A pretty yummy hotdog",
                            MerchantId = 1,
                            Name = "Chicken Peach Chipotle",
                            ReleaseDate = new DateTimeOffset(new DateTime(2023, 8, 20, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2241), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 91
                        },
                        new
                        {
                            Id = 3,
                            Category = "Food",
                            Description = "A hotdog",
                            MerchantId = 1,
                            Name = "Vegan Dog",
                            ReleaseDate = new DateTimeOffset(new DateTime(2023, 8, 3, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2246), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 4,
                            Category = "Shoes",
                            Description = "Comfy shoes",
                            MerchantId = 2,
                            Name = "Teva Slip-ons",
                            ReleaseDate = new DateTimeOffset(new DateTime(2022, 9, 4, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2250), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 43
                        },
                        new
                        {
                            Id = 5,
                            Category = "Camping",
                            Description = "Rain heaters",
                            MerchantId = 2,
                            Name = "Waterproof Matches",
                            ReleaseDate = new DateTimeOffset(new DateTime(2023, 5, 30, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2255), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 6,
                            Category = "Apparel",
                            Description = "Great wearable blanket",
                            MerchantId = 2,
                            Name = "Nano Puff Jacket",
                            ReleaseDate = new DateTimeOffset(new DateTime(2023, 1, 14, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2260), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = 7,
                            Category = "Food",
                            Description = "Not a hotdog",
                            MerchantId = 3,
                            Name = "Cheesy Breadsticks",
                            ReleaseDate = new DateTimeOffset(new DateTime(2023, 1, 21, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2265), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 14
                        },
                        new
                        {
                            Id = 8,
                            Category = "Food",
                            Description = "Definitely not a hotdog",
                            MerchantId = 3,
                            Name = "Cheese Cake",
                            ReleaseDate = new DateTimeOffset(new DateTime(2023, 6, 8, 14, 13, 50, 325, DateTimeKind.Unspecified).AddTicks(2269), new TimeSpan(0, -6, 0, 0, 0)),
                            StockQuantity = 30
                        });
                });

            modelBuilder.Entity("CommerceMvc.Models.Product", b =>
                {
                    b.HasOne("CommerceMvc.Models.Merchant", "Merchant")
                        .WithMany("Products")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_merchants_merchant_id");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("CommerceMvc.Models.Merchant", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
